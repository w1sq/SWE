// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file-storage.proto

package filestorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileStoringService_StoreFile_FullMethodName = "/proto.FileStoringService/StoreFile"
	FileStoringService_GetFile_FullMethodName   = "/proto.FileStoringService/GetFile"
)

// FileStoringServiceClient is the client API for FileStoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStoringServiceClient interface {
	StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*StoreFileResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
}

type fileStoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStoringServiceClient(cc grpc.ClientConnInterface) FileStoringServiceClient {
	return &fileStoringServiceClient{cc}
}

func (c *fileStoringServiceClient) StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*StoreFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreFileResponse)
	err := c.cc.Invoke(ctx, FileStoringService_StoreFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStoringServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, FileStoringService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStoringServiceServer is the server API for FileStoringService service.
// All implementations must embed UnimplementedFileStoringServiceServer
// for forward compatibility.
type FileStoringServiceServer interface {
	StoreFile(context.Context, *StoreFileRequest) (*StoreFileResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	mustEmbedUnimplementedFileStoringServiceServer()
}

// UnimplementedFileStoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileStoringServiceServer struct{}

func (UnimplementedFileStoringServiceServer) StoreFile(context.Context, *StoreFileRequest) (*StoreFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedFileStoringServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileStoringServiceServer) mustEmbedUnimplementedFileStoringServiceServer() {}
func (UnimplementedFileStoringServiceServer) testEmbeddedByValue()                            {}

// UnsafeFileStoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStoringServiceServer will
// result in compilation errors.
type UnsafeFileStoringServiceServer interface {
	mustEmbedUnimplementedFileStoringServiceServer()
}

func RegisterFileStoringServiceServer(s grpc.ServiceRegistrar, srv FileStoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileStoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileStoringService_ServiceDesc, srv)
}

func _FileStoringService_StoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStoringServiceServer).StoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStoringService_StoreFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStoringServiceServer).StoreFile(ctx, req.(*StoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStoringService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStoringServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStoringService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStoringServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStoringService_ServiceDesc is the grpc.ServiceDesc for FileStoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileStoringService",
	HandlerType: (*FileStoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreFile",
			Handler:    _FileStoringService_StoreFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileStoringService_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-storage.proto",
}
